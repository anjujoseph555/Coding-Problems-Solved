Output Format

Print each element on a new line in the same order it was received as input. Note that the floating point value should be correct up to 3 decimal places and the double to 9 decimal places.

Sample Input
3 12345678912345 a 334.23 14049.30493

Sample Output
3
12345678912345
a
334.230
14049.304930000

Solution:
#include <iostream>
#include <iomanip>
#include <cstdio>
using namespace std;

int main() {
    // Complete the code.
    int a; long long b; char c; float d; double e;
    cin >> a >> b >> c >> d >> e;
    cout << a << endl;
    cout << b << endl;
    cout << c << endl;
    cout << fixed << setprecision(3) << d << endl;
    cout << fixed << setprecision(9) << e << endl;
    return 0;
}

Theory:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Some C++ data types, their format specifiers, and their most common bit widths are as follows:
Int ("%d"): 32 Bit integer
Long ("%ld"): 64 bit integer
Char ("%c"): Character type
Float ("%f"): 32 bit real value
Double ("%lf"): 64 bit real value

READING:
char ch;
double d;
scanf("%c %lf", &ch, &d);
For the moment, we can ignore the spacing between format specifiers.

PRINTING:
char ch = 'd';
double d = 234.432;
printf("%c %lf", ch, d);
Note: You can also use cin and cout instead of scanf and printf; however, if you are taking a million numbers as input and printing a million lines, it is faster to use scanf and printf.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Precision of floating point numbers in C++ (floor(), ceil(), trunc(), round() and setprecision())

1.Floor method

// C++ program to demonstrate working of floor()
// in C/C++
#include<bits/stdc++.h>
using namespace std;

int main()
{
	double x =1.411, y =1.500, z =1.711;
	cout << floor(x) << endl;
	cout << floor(y) << endl;
	cout << floor(z) << endl;

	double a =-1.411, b =-1.500, c =-1.611;
	cout << floor(a) << endl;
	cout << floor(b) << endl;
	cout << floor(c) << endl;
	return 0;
}
Output:

1
1
1
-2
-2
-2



2.Ceil Method
// C++ program to demonstrate working of ceil()
// in C/C++
#include<bits/stdc++.h>
using namespace std;

int main()
{
	double x = 1.411, y = 1.500, z = 1.611;
	cout << ceil(x) << endl;
	cout << ceil(y) << endl;
	cout << ceil(z) << endl;

	double a = -1.411, b = -1.500, c = -1.611;
	cout << ceil(a) << endl;
	cout << ceil(b) << endl;
	cout << ceil(c) << endl;
	return 0;
}
Output:

2
2
2
-1
-1
-1

3.Trunc Method
Removes all decimal points
// C++ program to demonstrate working of round()
// in C/C++
#include<bits/stdc++.h>
using namespace std;

int main()
{
	double x = 1.411, y = 1.500, z = 1.611;

	cout << round(x) << endl;
	cout << round(y) << endl;
	cout << round(z) << endl;

	double a = -1.411, b = -1.500, c = -1.611;
	cout << round(a) << endl;
	cout << round(b) << endl;
	cout << round(c) << endl;
	return 0;
}
Output:

1
1
1
-1
-1
-1

4.Round Method
// C++ program to demonstrate working of round()
// in C/C++
#include<bits/stdc++.h>
using namespace std;

int main()
{
	double x = 1.411, y = 1.500, z = 1.611;

	cout << round(x) << endl;
	cout << round(y) << endl;
	cout << round(z) << endl;

	double a = -1.411, b = -1.500, c = -1.611;
	cout << round(a) << endl;
	cout << round(b) << endl;
	cout << round(c) << endl;
	return 0;
}
Output:

1
2
2
-1
-2
-2

5.Setprecision
Setprecision when used along with ‘fixed’ provides precision to floating point numbers correct to decimal numbers mentioned in the brackets of the setprecison.
// C++ program to demonstrate working of setprecision()
// in C/C++
#include<bits/stdc++.h>
using namespace std;

int main()
{
	double pi = 3.14159, npi = -3.14159;
	cout << fixed << setprecision(0) << pi <<" "<<npi<<endl;
	cout << fixed << setprecision(1) << pi <<" "<<npi<<endl;
	cout << fixed << setprecision(2) << pi <<" "<<npi<<endl;
	cout << fixed << setprecision(3) << pi <<" "<<npi<<endl;
	cout << fixed << setprecision(4) << pi <<" "<<npi<<endl;
	cout << fixed << setprecision(5) << pi <<" "<<npi<<endl;
	cout << fixed << setprecision(6) << pi <<" "<<npi<<endl;
}
Output:

3 -3
3.1 -3.1
3.14 -3.14
3.142 -3.142
3.1416 -3.1416
3.14159 -3.14159
3.141590 -3.141590

